// general
// ================

?tok_ignore: COMMENT
           | ";" -> extra_semicolon

path: STRING
param: STRING

// module
// ================

// TODO: ...
assert_expression: STRING+
module_name: IDENTIFIER
kernel_option_value: STRING

blck_module: "module" WS module_name "{" ctxt_module "}"
ctxt_module: ( tok_ignore
             | stmt_module_use
             | stmt_module_merge
             | stmt_module_assert
             | stmt_module_set )*
stmt_module_use:    "use"    ( WS IDENTIFIER )+   ";"
stmt_module_merge:  "merge"  WS path              ";"
stmt_module_assert: "assert" WS assert_expression ";"
stmt_module_set:    "set"    WS KERNEL_OPTION [ WS kernel_option_value ] ";"

// kernel
// ================

blck_kernel: "kernel" "{" ctxt_kernel "}"
// stmt_kernel_add_cmdline has to be before ctxt_module else the parser complains about infinite recursion. Seems to be a bug in lark.
ctxt_kernel: ( tok_ignore
             | stmt_kernel_add_cmdline
             | ctxt_module )*
stmt_kernel_add_cmdline: "add_cmdline" ( WS param )+ ";"

// genkernel
// ================

blck_genkernel: "genkernel" "{" ctxt_genkernel "}"
ctxt_genkernel: ( tok_ignore
                | stmt_genkernel_add_params )*
stmt_genkernel_add_params: "add_params" ( WS param )+ ";"

// initramfs
// ================

blck_initramfs: "initramfs" "{" ctxt_initramfs "}"
ctxt_initramfs: ( tok_ignore
                | blck_genkernel
                | stmt_initramfs_add_cmdline )*
stmt_initramfs_add_cmdline: "add_cmdline" ( WS param )+ ";"

// efi
// ================

blck_efi: "efi" "{" ctxt_efi "}"
ctxt_efi: ( tok_ignore )*

// install
// ================

blck_install: "install" "{" ctxt_install "}"
ctxt_install: ( tok_ignore
              | blck_efi
              | stmt_install_target_dir
              | stmt_install_target
              | stmt_install_mount
              | stmt_install_assert_mounted )*
stmt_install_target_dir:     "target_dir"     WS path ";"
stmt_install_target:         "target"         WS path ";"
stmt_install_mount:          "mount"          WS path ";"
stmt_install_assert_mounted: "assert_mounted" WS path ";"

// build
// ================

blck_build: "build" "{" ctxt_build "}"
ctxt_build: ( tok_ignore
            | stmt_build_initramfs
            | stmt_build_pack )*
stmt_build_initramfs: "initramfs" WS STRING ";"
stmt_build_pack: "pack" WS STRING [ WS param ] ";"

// root
// ================

blck_root: ctxt_root
ctxt_root: ( tok_ignore
           | blck_module
           | blck_kernel
           | blck_initramfs
           | blck_install
           | blck_build
           | stmt_root_include_module_dir
           | stmt_root_include_module )*

stmt_root_include_module_dir: "include_module_dir" WS path ";"
stmt_root_include_module:     "include_module"     WS path ";"

// terminals
// ================

KERNEL_OPTION: /[_A-Z0-9]+/
COMMENT:       /#[^\n]*/
IDENTIFIER:    ( "_" | "-" | LETTER | DIGIT )+

// The negative lookbehind avoids beeing greedy for the semicolon at the end
STRING:        ( ESCAPED_STRING | /\S+(?<!;)/ )

// meta
// ================

%import common.ESCAPED_STRING
%import common.LETTER
%import common.DIGIT
%import common.WS
%ignore WS
%ignore COMMENT
